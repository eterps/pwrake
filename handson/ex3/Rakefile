require 'montage_tools'
require 'rake/clean'

task( :default => "mosaic.jpg" )
#task( :default => "shrunk.jpg" )

ENV['PATH'] += ":/home/tanaka/local/montage/bin"
puts "ENV['PATH']=#{ENV['PATH']}"

INPUT_DIR = ENV["INPUT_DIR"] || "r"
puts "INPUT_DIR=#{INPUT_DIR}"

REGION_HDR = "#{INPUT_DIR}/region.hdr"
SHRUNK_HDR = "#{INPUT_DIR}/shrunken.hdr"

TILE_NX = ENV["TILE_NX"]
TILE_NY = ENV["TILE_NY"]
TILE_PIXEL=2000
SHRINK_FACTOR=10

open(REGION_HDR) do |f|
  while l=f.gets
    eval l if /(NAXIS[12])\s*=\s*(\d+)/ =~ l
  end
end

NX = [ (TILE_NX || NAXIS1/TILE_PIXEL).to_i, 4 ].max
NY = [ (TILE_NY || NAXIS2/TILE_PIXEL).to_i, 4 ].max


### projection

SRC_FITS = FileList["#{INPUT_DIR}/*.fits"]

file( "pimages.tbl" ) {
  P_IMGTBL = []
  PRJ_FITS=[]
  SRC_FITS.each do |src|
    desc prj = src.sub( %r|^(.*?)([^/]+).fits|, 'p/\2.p.fits' )
    file( prj => [src,REGION_HDR] ) do |t|
      t.rsh "mProjectPP #{src} #{prj} #{REGION_HDR}"
      Montage.collect_imgtbl( t, P_IMGTBL )
    end
    PRJ_FITS << prj
  end
  pw_multitask( "ProjectPP" => PRJ_FITS ).invoke
  Montage.put_imgtbl( P_IMGTBL, "p", "pimages.tbl" )
}


### dif & fit

file( "diffs.tbl" => "pimages.tbl" ) {
  sh "mOverlaps pimages.tbl diffs.tbl"
}

file "fitfits.tbl" => "diffs.tbl" do |this_task|
  DIFF_FITS=[]
  FIT_TXT=[]
  FIT_TBL=[]
  diffs = Montage.read_overlap_tbl("diffs.tbl")
  diffs.each do |c|
    p1 = "p/"+c[2]
    p2 = "p/"+c[3]
    DIFF_FITS << dif_fit = "d/"+c[4]

    file( dif_fit => [c[2],c[3],REGION_HDR,"pimages.tbl"] ) {|t|
      x1,x2,rh = t.prerequisites
      t.rsh "mDiff #{x1} #{x2} #{t.name} #{REGION_HDR}"
      r = t.rsh "mFitplane #{t.name}"
      FIT_TBL << [c[0..1],r]
    }
  end
  pw_multitask( "Diff" => DIFF_FITS ).invoke
  Montage.write_fitfits_tbl(FIT_TBL, "fitfits.tbl") 
end


### background-model

file( "corrections.tbl" => ["fitfits.tbl", "pimages.tbl"] ) {
  sh "mBgModel pimages.tbl fitfits.tbl corrections.tbl"
}


### background correction

C_IMGTBL=[]

file( "cimages.tbl" => ["corrections.tbl","pimages.tbl"] ) {
  pfiles = FileList["p/*.p.fits"]
  cfiles = pfiles.map do |s|    
    src = s.sub(%r{p/(.*)\.p\.fits}, '\1.p.fits')
    desc dst = src.sub(%r{(.*)\.p\.fits}, 'c/\1.c.fits')
    file( dst => ["p/#{src}","corrections.tbl","pimages.tbl"] ) { |t|
      t.rsh "(cd p; mBackground -t #{src} ../#{dst} ../pimages.tbl ../corrections.tbl)"
      #t.rsh "mBackground -t p/#{src} #{dst} pimages.tbl corrections.tbl"
      Montage.collect_imgtbl( t, C_IMGTBL )
    }
    dst
  end
  pw_multitask( "Background" => cfiles ).invoke
  Montage.put_imgtbl( C_IMGTBL, "c", "cimages.tbl" )
}


### tile region

file( "simages.tbl" => "cimages.tbl" ) {
  TILE_HDRS = []
  TILE_TBL = []
  TILE_FITS = []
  SHRUNK_FITS = []
  S_IMGTBL=[]

  NY.times do |iy|
    NX.times do |ix|
      TILE_HDRS << tile_hdr = "t/tile_#{ix}_#{iy}.hdr"
      file( tile_hdr => ["cimages.tbl",REGION_HDR,"t"] ) {|t|
	opt="#{NX} #{NY} #{ix} #{iy} 50 50"
	t.rsh "mTileHdr #{t.prerequisites[1]} #{t.name} #{opt}"
      }

      TILE_TBL << tile_tbl = tile_hdr.ext('tbl')
      file( tile_tbl => [tile_hdr,"cimages.tbl"] ) {|t|
	t.rsh "mCoverageCheck cimages.tbl #{t.name} -header #{t.prerequisites[0]}"
      }

      TILE_FITS << tile_fits = tile_hdr.ext('t.fits')
      file( tile_fits => [tile_tbl,tile_hdr] ) {|t|
	a = t.prerequisites.join(" ")
	t.rsh "mAdd -e -p c #{a} #{t.name} "
      }
 
      SHRUNK_FITS << shrunk_fits = tile_fits.sub(%r{t/(.*)\.t\.fits}, 's/\1.s.fits')
      file( shrunk_fits => [tile_fits,tile_tbl] ) {|t|
	t.rsh "mShrink #{t.prerequisites[0]} #{t.name} #{SHRINK_FACTOR}"
        Montage.collect_imgtbl( t, S_IMGTBL )
      }
    end
  end

  pw_multitask( "TileHdr" => TILE_HDRS ).invoke
  pw_multitask( "CoverageCheck" => TILE_TBL ).invoke
  pw_multitask( "Add.tile" => TILE_FITS ).invoke
  pw_multitask( "Shink" => SHRUNK_FITS ).invoke
  Montage.put_imgtbl( S_IMGTBL, "s", "simages.tbl" )
}


file( "mosaic.fits" => ["cimages.tbl", REGION_HDR] ) {|t|
  sh "mAdd -p c #{t.prerequisites.join(' ')} #{t.name}"
}

file( "mosaic.jpg" => "mosaic.fits" ) {|t|
  sh "mJPEG -ct 0 -gray #{t.prerequisites[0]} -1.5s 60s gaussian -out #{t.name}"
}

file( "shrunk.fits" => ["simages.tbl", SHRUNK_HDR] ) {|t|
  sh "mAdd -n -e -p s #{t.prerequisites.join(' ')} #{t.name}"
}

file( "shrunk.jpg" => ["shrunk.fits"] ) {|t|
  sh "mJPEG -ct 0 -gray #{t.prerequisites[0]} -1.5s 60s gaussian -out #{t.name}"
}


mkdir_p "p"
mkdir_p "d"
mkdir_p "c"
mkdir_p "t"
mkdir_p "s"

CLEAN.include %w[ p d c t s ]
CLEAN.include %w[ mosaic.fits mosaic_area.fits mosaic.jpg ]
CLEAN.include %w[ shrunk.fits shrunk_area.fits shrunk.jpg ]
CLEAN.include %w[ fittxt.tbl fitfits.tbl ]
CLEAN.include %w[ rimages_all.tbl rimages.tbl ]
CLEAN.include %w[ pimages.tbl cimages.tbl simages.tbl ]
CLEAN.include %w[ diffs.tbl corrections.tbl ]
CLEAN.include "metis.graph*"
